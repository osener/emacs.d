#+TITLE: Ozan Sener's Emacs configuration
#+OPTIONS: toc:nil num:nil ^:nil
* Load some lisp
#+begin_src emacs-lisp
  (require 'cl)
#+end_src

** Install some additional packages
#+begin_src emacs-lisp
  (require-package 'starter-kit-bindings)
  (require-package 'ack-and-a-half)
  (require-package 'bm)
  (require-package 'undo-tree)
  (require-package 'popwin)
  (require-package 'smartrep)
  (require-package 'erc-hl-nicks)
  (require-package 'sauron)
  (require-package 'helm)
  (require-package 'w3m)
  (require-package 'python '(20120814))
  (require-package 'python-pep8)
  (require-package 'python-pylint)
  (require-package 'yasnippet)
#+end_src

* Programming languages
** Scheme
#+begin_src emacs-lisp
  (add-hook 'scheme-mode-hook 'sanityinc/lisp-setup)
#+end_src
*** Chicken Scheme
Load chicken
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/local/lib/chicken/6/")
  (autoload 'chicken-slime "chicken-slime" "SWANK backend for Chicken" t)
  (add-hook 'scheme-mode-hook
            (lambda ()
              (slime-mode t)))
#+end_src
** Clojure
Static checking using kibit
#+begin_src emacs-lisp
  (require 'compile)
  (add-to-list 'compilation-error-regexp-alist-alist
               '(kibit "At \\([^:]+\\):\\([[:digit:]]+\\):" 1 2 nil 0))
  (add-to-list 'compilation-error-regexp-alist 'kibit)

  ;; A convenient command to run "lein kibit" in the project to which
  ;; the current emacs buffer belongs to.
  (defun kibit ()
    "Run kibit on the current project.
  Display the results in a hyperlinked *compilation* buffer."
    (interactive)
    (compile "lein kibit"))
#+end_src
** Python
*** Python.el ipython integration
Code completion
#+begin_src emacs-lisp
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args ""
        python-shell-prompt-regexp "In \\[[0-9]+\\]: "
        python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
        python-shell-completion-setup-code
        "from IPython.core.completerlib import module_completion"
        python-shell-completion-module-string-code
        "';'.join(module_completion('''%s'''))\n"
        python-shell-completion-string-code
        "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
#+end_src
*** Auto-indentation
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook
    #'(lambda ()
        (define-key python-mode-map "\C-m" 'newline-and-indent)))
#+end_src
** C
Auto indentation (C-j is harder to reach on Colemak)
#+begin_src emacs-lisp
  (add-hook 'c-mode-common-hook '(lambda ()
        (local-set-key (kbd "RET") 'newline-and-indent)))
#+end_src
** Javascript
*** Insert semicolons automatically
#+begin_src emacs-lisp
  (require 'js3-mode)
  (defvar js3-semicolon-contexts
    (list js3-NAME js3-LP js3-SCRIPT js3-CALL js3-BLOCK))
  (defun autopair-js3-maybe-insert-semi-colon (action pair pos-before)
    "handler for automatically inserting semi-colon at the end of function call."
    (cond ((and (eq action 'opening)
                (eq pair ?\))
               (save-excursion
                 (goto-char pos-before)
                 (skip-chars-backward " \t")
                 (memq (js3-node-type (js3-node-at-point (point)))
                       js3-semicolon-contexts)
                 ))
           (save-excursion
             (let ((forward-sexp-function nil))
               (goto-char pos-before)
               (forward-sexp))
             (if (looking-at-p "[^[:graph:]]*$")
               (insert ";"))))))

  (add-hook 'js3-mode-hook
            '(lambda ()
               (setq autopair-handle-action-fns
                     (list #'autopair-default-handle-action
                           #'autopair-js3-maybe-insert-semi-colon))))
#+end_src

* Eshell
Great intro post for eshell, also the source of some of these settings:
http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/

Temporary fix that allows me to launch Eshell on Emacs BZR Head
#+begin_src emacs-lisp
  (setq eshell-output-filter-functions
    '(eshell-postoutput-scroll-to-bottom
      eshell-handle-control-codes
      eshell-handle-ansi-color
      eshell-watch-for-password-prompt))
#+end_src

** Change some defaults
#+begin_src emacs-lisp
  (eval-after-load 'esh-opt
    '(progn
       (require 'em-prompt)
       (setq eshell-cmpl-ignore-case t)
       (setq eshell-prefer-lisp-functions t)
       (setq eshell-where-to-jump 'begin)
       (setq eshell-review-quick-commands nil)
       (setq eshell-smart-space-goes-to-end t)
       (setq eshell-directory-name
             (expand-file-name "./" (expand-file-name "eshell" "~/.emacs.d")))))
#+end_src

** Convenience function for usage in a terminal emulator
This allows you to use eshell in a similar fashion to standard Unix
shells in a terminal emulator.

Call Emacs like this for an one-off eshell buffer:
emacsclient -a '' -t -e "(server-eshell)"
#+begin_src emacs-lisp
  (defun server-eshell ()
    "Command to be called by emacs-client to start a new shell.

  A new eshell will be created. When the frame is closed, the buffer is
  deleted or the shell exits, then hooks will take care that the other
  actions happen. For example, when the frame is closed, then the buffer
  will be deleted and the client disconnected.

  Also creates a local binding of 'C-x #' to kill the buffer."
    (lexical-let ((buf (eshell t))
                  (client (first server-clients))
                  (frame (selected-frame)))
      (labels ((close (&optional arg)
                      (when (not (boundp 'cve/recurse))
                        (let ((cve/recurse t))
                          (delete-frame frame)
                          (kill-buffer buf)
                          (server-delete-client client)))))
        (add-hook 'eshell-exit-hook #'close t t)
        (add-hook 'delete-frame-functions #'close t t))
      (local-set-key (kbd "C-x #") (lambda () (interactive) (kill-buffer buf)))
      (delete-other-windows)
      nil))
#+end_src


** Quake-like eshell window
#+begin_src emacs-lisp
  (require 'shell-pop)
  (shell-pop-set-internal-mode "eshell")
  (global-set-key [f8] 'shell-pop)
#+end_src

* Window management
** Popwin
#+begin_src emacs-lisp
  (require 'popwin)
  (setq display-buffer-function 'popwin:display-buffer)

  (setq popwin:special-display-config
        '(("*Help*" :height 30 :stick t)
          ("*Completions*" :noselect t)
          ("*compilation*" :noselect t)
          ("*Messages*" :height 30)
          ("*Occur*" :noselect t)
          ("*Directory*" :noselect t)
          ("*Packages*" :height 30)
          ("*ack-and-a-half*" :noselect t)
          ("\\*Slime Description.*" :noselect t :regexp t :height 30)
          ("*magit-commit*" :noselect t :height 40 :width 80)
          ("*magit-diff*" :noselect t :height 40 :width 80)
          ("*magit-edit-log*" :noselect t :height 15 :width 80)
          ("\\*Slime Inspector.*" :regexp t :height 30)
          ("*Ido Completions*" :noselect t :height 30)
          ("\\*ansi-term\\*.*" :regexp t :height 30)
          ("*shell*" :height 30)
          ("*gists*" :height 30)
          ("*sldb.*":regexp t :height 30)))
#+end_src
* Email
Mu4e (http://www.djcbsoftware.nl/code/mu/) is e great mail reader.
#+begin_src sh
  brew install offlineimap
  brew install mu --with-emacs
#+end_src

#+begin_src emacs-lisp
  (require 'mu4e)

  (setq mu4e-drafts-folder "/[Gmail].Drafts")
  (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
  (setq mu4e-trash-folder  "/[Gmail].Trash")

  ;; don't save message to Sent Messages, Gmail/IMAP will take care of this
  (setq mu4e-sent-messages-behavior 'delete)

  (setq mu4e-html2text-command "w3m -dump")

  ;; setup some handy shortcuts
  (setq mu4e-maildir-shortcuts
        '( ("/INBOX"               . ?i)
           ("/[Gmail].Sent Mail"   . ?s)
           ("/[Gmail].Trash"       . ?t)
           ("/[Gmail].All Mail"    . ?a)))

  ;; allow for updating mail using 'U' in the main view:
  (setq mu4e-get-mail-command "offlineimap")

  ;; something about ourselves
  (setq
   user-mail-address "ozan@ozansener.com"
   user-full-name  "Ozan Sener"
   message-signature
   (concat
    "Ozan Sener\n"
    "http://ozansener.com\n"))

  (setq mail-user-agent 'mu4e-user-agent)
#+end_src

Send mail using smtpmail-async
#+begin_src emacs-lisp
  ;; make sure the gnutls command line utils are installed
  ;; package 'gnutls-bin' in Debian/Ubuntu

  (autoload 'async-smtpmail-send-it "smtpmail-async")
  (setq message-send-mail-function 'async-smtpmail-send-it
        smtpmail-stream-type 'starttls
        starttls-use-gnutls t
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587)

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
#+end_src

* ERC
** Disable trailing whitespace in ERC buffers
#+begin_src emacs-lisp
  (add-hook 'erc-mode-hook (lambda ()
                                (setq show-trailing-whitespace nil)))
#+end_src

** Growl notifications
#+begin_src emacs-lisp
  (defun my-erc-hook (match-type nick message)
    "Shows a growl notification, when user's nick was mentioned. If the buffer is currently not visible, makes it sticky."
    (unless (posix-string-match "^\\** *Users on #" message)
      (todochiku-message
       "ERC"
       (concat "Name mentioned on: " (buffer-name (current-buffer)))
       (todochiku-icon 'irc))))
  (add-hook 'erc-text-matched-hook 'my-erc-hook)
#+end_src
** ZNC
#+begin_src emacs-lisp
  (require 'znc)
#+end_src
* Helm
#+begin_src emacs-lisp
  (require 'helm-config)
#+end_src

Eshell completion
#+begin_src emacs-lisp
  (require 'helm-files)

  (add-hook 'eshell-mode-hook
            #'(lambda ()
                (define-key eshell-mode-map
                  (kbd "M-p")
                  'helm-eshell-history)))
#+end_src

Ipython completion
#+begin_src emacs-lisp
  (require 'helm-ipython)
  (define-key python-mode-map (kbd "M-<tab>")
    'helm-ipython-complete)
#+end_src

Elisp completion
#+begin_src emacs-lisp
  (define-key emacs-lisp-mode-map (kbd "M-<tab>")
    'helm-lisp-completion-at-point)
#+end_src

Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>") 'helm-mini)
#+end_src

* Notifications
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c s") 'sauron-toggle-hide-show)
  (global-set-key (kbd "C-c h") 'sauron-clear)

  (setq
    sauron-max-line-length 120

    ;; uncomment to show sauron in the current frame
    ;; sauron-separate-frame nil

    ;; you probably want to add your own nickname to the these patterns
    sauron-watch-patterns
    '("ozansener" "meegee" "Ozan")

    ;; you probably want to add you own nick here as well
    sauron-watch-nicks
    '("ozansener" "meegee"))

  (add-hook 'sauron-event-block-functions
    (lambda (origin prio msg &optional props)
      (or
        (string-match "^*** Users" msg)))) ;; filter out IRC spam
    (global-set-key (kbd "C-c s") 'sauron-toggle-hide-show)
  (global-set-key (kbd "C-c h") 'sauron-clear)

  (setq
    sauron-max-line-length 120

    ;; uncomment to show sauron in the current frame
    ;; sauron-separate-frame nil

    ;; you probably want to add your own nickname to the these patterns
    sauron-watch-patterns
    '("ozansener" "meegee" "Ozan")

    ;; you probably want to add you own nick here as well
    sauron-watch-nicks
    '("ozansener" "meegee"))

  ;; some sound/light effects for certain events
  (add-hook 'sauron-event-added-functions
    (lambda (origin prio msg &optional props)
      (if (string-match "ping" msg)
        (sauron-fx-sox "/System/Library/Sounds/Tink.aiff"))
      (cond
        ((= prio 3) (sauron-fx-sox "/System/Library/Sounds/Ping.aiff"))
        ((= prio 4) (sauron-fx-sox "/System/Library/Sounds/Purr.aiff"))
        ((= prio 5)
          (sauron-fx-sox "/System/Library/Sounds/Glass.aiff")))))

  (add-hook 'sauron-event-block-functions
    (lambda (origin prio msg &optional props)
      (or
        (string-match "^*** Users" msg)))) ;; filter out IRC spam

#+end_src
* OSX related tweaks
** Use system Trash
Uses [[http://hasseg.org/trash/][trash]]
#+begin_src emacs-lisp
  (when *is-a-mac*
    (setq delete-by-moving-to-trash t)
    (defun system-move-file-to-trash (filename)
      (shell-command (concat "trash " (shell-quote-argument filename)))))
#+end_src

** Input related tweaks
#+begin_src emacs-lisp
  (when *is-a-mac*
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta)
    (setq mouse-wheel-scroll-amount '(0.001)))
#+end_src

** Add a shortcut for toggling fullscreen mode in Cocoa Emacs
#+begin_src emacs-lisp
(when *is-cocoa-emacs*
  (global-set-key [f11] 'ns-toggle-fullscreen))
#+end_src

* Cosmetic changes
** Set default font
#+begin_src emacs-lisp
  (if *is-a-mac*
      (add-to-list 'default-frame-alist
                   '(font . "Akkurat-Mono-14"))
    (add-to-list 'default-frame-alist
                 '(font . "Akkurat-Mono-12")))
#+end_src

** Set Unicode font
#+begin_src emacs-lisp
  (set-fontset-font "fontset-default" 'unicode "Menlo")
#+end_src

** Disable bold faces
#+begin_src emacs-lisp
  (mapc
   (lambda (face)
     (set-face-attribute face nil :weight 'normal :underline nil))
   (face-list))
#+end_src

* Misc Emacs modes
** Completion
Launch standard completion using tab
#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
  (add-to-list 'completion-styles 'initials t)
#+end_src

Exclude very large buffers from dabbrev
#+begin_src emacs-lisp
  (defun sanityinc/dabbrev-friend-buffer (other-buffer)
    (< (buffer-size other-buffer) (* 1 1024 1024)))

  (setq dabbrev-friend-buffer-function 'sanityinc/dabbrev-friend-buffer)
#+end_src
** Convenient bookmarking using bm
#+begin_src emacs-lisp
(global-set-key (kbd "<C-f2>") 'bm-toggle)
(global-set-key (kbd "<f2>")   'bm-next)
(global-set-key (kbd "<S-f2>") 'bm-previous)
(global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
(global-set-key (kbd "<left-fringe> <wheel-down>") 'bm-next-mouse)
(global-set-key (kbd "<left-fringe> <wheel-up>") 'bm-previous-mouse)
#+end_src

** Use undo-tree everywhere
#+begin_src emacs-lisp
  (global-undo-tree-mode)
#+end_src

** Browsers
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-firefox)
  (setq w3m-command "/usr/local/bin/w3m")

#+end_src

** Disable hl-line-mode
#+begin_src emacs-lisp
  (remove-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)
#+end_src

** Shorter aliases for ack-and-a-half
#+begin_src emacs-lisp
  (defalias 'ack 'ack-and-a-half)
  (defalias 'ack-same 'ack-and-a-half-same)
  (defalias 'ack-find-file 'ack-and-a-half-find-file)
  (defalias 'ack-find-file-same 'ack-and-a-half-find-file-same)
#+end_src

** Shell
Use fish shell
#+begin_src emacs-lisp
  (setq explicit-shell-file-name "/usr/local/bin/fish")
#+end_src

** Snippets
#+begin_src emacs-lisp
  (yas-global-mode 1)
#+end_src

* Misc keybindings
** Quick way to open a link
#+begin_src emacs-lisp
  (global-set-key "\C-cb" 'org-open-at-point-global)
#+end_src

* Misc tweaks
** No bell whatsoever please
#+begin_src emacs-lisp
  (setq visual-bell nil)
  (setq ring-bell-function 'ignore)
#+end_src
** Enable menubar explicitly
#+begin_src emacs-lisp
  (menu-bar-mode t)
#+end_src
** Disable autopair in some modes
#+begin_src emacs-lisp
  (add-hook 'erc-mode-hook 'inhibit-autopair)
  (add-hook 'term-mode-hook 'inhibit-autopair)
#+end_src

** Disable show-trailing-whitespace in some modes
#+begin_src emacs-lisp
  (defun inhibit-show-trailing-whitespace ()
    "Prevent show-trailing-whitespace from enabling in the current buffer"
    (setq show-trailing-whitespace nil))

  (add-hook 'erc-mode-hook 'inhibit-show-trailing-whitespace)
  (add-hook 'term-mode-hook 'inhibit-show-trailing-whitespace)
  (add-hook 'eshell-mode-hook 'inhibit-show-trailing-whitespace)
  (add-hook 'nrepl-mode-hook 'inhibit-show-trailing-whitespace)
  (add-hook 'inferior-python-mode-hook 'inhibit-show-trailing-whitespace)
  (add-hook 'helm-update-hook 'inhibit-show-trailing-whitespace)
#+end_src

** Wrap lines longer than 79 characters
#+begin_src emacs-lisp
  (setq-default fill-column 79)
#+end_src
